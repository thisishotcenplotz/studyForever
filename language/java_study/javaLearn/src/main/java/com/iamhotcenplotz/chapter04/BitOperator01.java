package com.iamhotcenplotz.chapter04;
// 位运算
public class BitOperator01 {
    public static void main(String[] args) {
        //二进制运算都是用 补码来计算的
        // 整数的原码、反码、补码都是一样的
        // 负数的补码= 反码+1，反码= 补码-1

        // 2&3
        // 1. 先获得2 和 3 的补码
        // -> 2: 00000000 00000000 00000000 00000010
        // -> 3: 00000000 00000000 00000000 00000011
        // 2. 2 & 3
        // 00000000 00000000 00000000 00000010
        // 00000000 00000000 00000000 00000011
        // -----------------------------------
        // 00000000 00000000 00000000 00000010  (补码，要转原码，因为是整数所以原码也是这个) ==> 2

        System.out.println(2&3);

        //
        // ~-2
        // 原码：10000000 00000000 00000000 00000010
        // 反码：11111111 11111111 11111111 11111101
        // 补码：11111111 11111111 11111111 11111110
        // ~2 ：00000000 00000000 00000000 00000001 ==> 1
        System.out.println(~-2);

        // ~2:
        // 原码：00000000 00000000 00000000 00000010
        // 补码：00000000 00000000 00000000 00000010
        // 操作：11111111 11111111 11111111 11111101  (这里要转原码 ；负数的反码=补码-1)
        // 运算后反码：11111111 11111111 11111111 11111100  (这里要转原码)
        // 运算后原码：10000000 00000000 00000000 00000011  ==> 3
        System.out.println(~2);

        // 2 ^ 3
        // 00000000 00000000 00000000 00000010
        // 00000000 00000000 00000000 00000011
        // -----------------------------------
        // 00000000 00000000 00000000 00000001 ==> 1
        System.out.println(2^3);


    }
}
